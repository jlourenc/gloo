syntax = "proto3";
package consul.options.gloo.solo.io;

option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/consul";

import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;


// mirrors client query options struct in consul catalog api
message QueryOptions{
    // UseCache requests that the agent cache results locally. See
    // https://www.consul.io/api/features/caching.html for more details on the
    // semantics.
    //
    // Defaults to true.
    google.protobuf.BoolValue use_cache = 1;

    // MaxAge limits how old a cached value will be returned if UseCache is true.
    // If there is a cached response that is older than the MaxAge, it is treated
    // as a cache miss and a new fetch invoked. If the fetch fails, the error is
    // returned. Clients that wish to allow for stale results on error can set
    // StaleIfError to a longer duration to change this behavior. It is ignored
    // if the endpoint supports background refresh caching. See
    // https://www.consul.io/api/features/caching.html for more details.
    //
    // Defaults to 5s.
    google.protobuf.Duration max_age = 2;

    // StaleIfError specifies how stale the client will accept a cached response
    // if the servers are unavailable to fetch a fresh one. Only makes sense when
    // UseCache is true and MaxAge is set to a lower, non-zero value. It is
    // ignored if the endpoint supports background refresh caching. See
    // https://www.consul.io/api/features/caching.html for more details.
    //
    // Defaults to 5m.
    google.protobuf.Duration stale_if_error = 3;
}

// These are the same consistency modes offered by Consul. For more information please review https://www.consul.io/api-docs/features/consistency.
// For more information please review https://pkg.go.dev/github.com/hashicorp/consul/api#QueryOptions.
enum ConsulConsistencyModes{
    // RequireConsistent forces the read to be fully consistent.
    // This is more expensive but prevents ever performing a stale
    // read.
    ConsistentMode = 0;
    // This will set (clears) both the AllowStale and the RequireConsistent in the consul api to false.
    DefaultMode = 2;
    // AllowStale allows any Consul server (non-leader) to service
    // a read. This allows for lower latency and higher throughput
    StaleMode = 1;
}